"use strict";

/*
Copyright (c) 2017 Ram√≥n Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
  Cresta / TFA weather sensor protocol

  See members.upc.nl/m.beukelaar/Crestaprotocol.pdf
*/

const utils = require('utils');

const cresta = {
    channels: [0x20, 0x40, 0x60, 0xA0, 0xC0]
}

var cr;

// Decode the received data
function decodeCrestaData(data) {
    let typeNr = utils.hex2dec(data.substr(4, 2)) & 0x1f;
    let id = data.substr(0, 2);
    let channel = 0;
    let result = {
        id: id,
        channel: channel,
        data: {}
    }

    if (typeNr === 30) { // temperature/humidity
        let temperature = data[9] + data[6] + '.' + data[7];
        let sign = (data[8] === 'c' ? 1 : -1);
        result.data = {
            temperature: sign * temperature,
            humidity: Number(data.substr(10,2)),
            lowbattery: (data[2] !== 'c')
        }
        let cid = Number(utils.hex2dec(id));
        for (let c = 0; c < cresta.channels.length; c++) {
            if (cid >= cresta.channels[c]) {
                result.channel = c + 1;
            }
        }
    } else if (typeNr === 12) { // Wind
        let d = utils.hex2dec(data[20]); // direction
        result.data = {
            temperature: (data[8] === 'c' ? 1 : -1) * data[9] + data[6] + '.' + data[7],
            windchill: (data[12] === 'c' ? 1 : -1) * (data[13] + data[10] + '.' + data[11]),
            averagespeed: Number(data[17] + data[14] + '.' + data[15]),
            currentspeed: Number(data[18] + data[19] + '.' + data[16]), // gust
            direction: 22.5 * ((-(d^(d>>1)^(d>>2)^(d>>3))) & 0xf),
            lowbattery: (data[2] !== 'c')
        }
    } else if (typeNr === 13) { // UV
      result.data = {
          temperature: Number(data[9] + data[6] + '.' + data[7]),
          uvvalue: Number(data[10] + data[11] + '.' + data[8]),
          uvindex: Number(data[14] + data[12] + '.' + data[13]),
          uvlevel: Number(data[15]),
          lowbattery: (data[2] !== 'c')
        }
    } else if (typeNr === 14) { // Rain
      result.data = {
          raintotal: 0.7 * (utils.hex2dec(data.slice(8, 10)) * 256 + utils.hex2dec(data.slice(6, 8))),
          lowbattery: (data[2] !== 'c')
        }
    }
    cr.debug(result.data);

    return result;
}

// Parste the data according to the Cresta protocol
var parseCrestaData = function(payLoad) {
    if(payLoad.length % 9 !== 0) {
        payLoad = payLoad.slice(0,-1*(payLoad.length % 9));
    }
    let result = 'Not a valid Cresta message';
    let decode = (x) => { return ((x ^ (x << 1)) & 0xff) };

    let decVal = '';
    let buf = [];
    for (let i = 0; i < payLoad.length && payLoad[i + 8] === 0; i += 9) {
        let valstr = payLoad.slice(i, i + 8).reverse().join('');
        let val1 = Number(utils.bin2dec(valstr));
        let val2 = decode(val1);
        decVal += ('00' + val2.toString(16)).slice(-2);
        buf[i / 9] = val1;
    }
    let len = (utils.hex2dec(decVal.substr(2, 2)) >> 1) & 0x1F;
    if ((len < buf.length)) {
        //only check the first checksum.
        let cs = 0;
        for (let i = 0; i <= len; i++) {
            cs ^= buf[i];
        }
        if (cs === 0) {
            result = decodeCrestaData(decVal);
        } else {
            result = 'Invalid Checksum';
        }
    }
    return result;
}

module.exports = {
    init: () => cr = new utils.WeatherSignal({
        id: 'cresta',
        name: 'Cresta / TFA',
        hint: {
            en: 'Supports various brands, like Cresta (eg WXR815), TFA Dostmann etc.',
            nl: 'Ondersteunt verschillende merken, zoals Cresta (eg WXR815), TFA Dostmann etc.'
        },
        signal: 'Cresta',
        parser: parseCrestaData
    })
}
