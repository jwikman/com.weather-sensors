"use strict";

/*
Copyright (c) 2017 Ram√≥n Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
 Orgeon Scientific RF protocol
 Version 2:
  - Freq. 1024 Hz = 976.5625 us / 2 = 488.28125 us (pulse is 93 us shorter)
  - Coding: 0 = '1001'; 1 = '0110'
  - Preamble:  16 x 1, ie. '0110'
  - Sync: '1010', i.e. '1001', '0110', '1001', '0110'
  - Total sof: 32 + 8 = 40
 Version 2.2:
  - Freq. 1000 Hz, rest same as v2
 Version 3:
  - Freq. 1024 Hz = 976.5625 us / 2 = 488.28125 us (pulse is 138 us shorter)
  - Coding: 0 = '10'; 1 = '01'
  - Preamble:  24 x 1, ie. '01'
  - Sync: '1010', i.e. '10', '01', '10', '01'
  - Total sof: 24 + 4 = 28
*/

const utils = require('utils');

const dataLayouts = {
	'TH1': {
		len: 7,
		data: {
			temperature: { start: 0, len: 3, math: [{ div: 10 }] },
			sign: { start: 3, len: 1 },
			humidity: { start: 4, len: 2 },
			unknown: { start: 6, len: 1 }
		}
	},
	'T1': {
		len: 4,
		data: {
			temperature: { start: 0, len: 3, math: [{ div: 10 }] },
			sign: { start: 3, len: 1 }
		}
	},
	'UV1': {
		len: 4,
		data: {
			uvindex: { start: 0, len: 2, enc: 'bin' },
			unknown: { start: 2, len: 2 }
		}
	},
	'UV2': {
		len: 5,
		data: {
			uvindex: { start: 0, len: 2 },
			uvraw: { start: 2, len: 3, enc: 'bin', math: [{ min: 108 }, { div: 16 }] }
		}
	},
	'W1': {
		len: 9,
		data: {
			direction: { start: 0, len: 1, enc: 'bin' },
			unknown: { start: 1, len: 2 },
			currentspeed: { start: 3, len: 3, math: [{ div: 10 }] },
			averagespeed: { start: 6, len: 3, math: [{ div: 10 }] }
		}
	},
	'R1': {
		len: 10,
		data: {
			rainrate: { start: 0, len: 4, math: [{ div: 100 }] },  // 0.01 inch/hr
			raintotal: { start: 4, len: 6, math: [{ div: 1000 }] } // 0.001 inch
		}
	},
	'R2': {
		len: 8,
		data: {
			rainrate: { start: 0, len: 4, math: [{ div: 10 }] },   // 0.1 mm/hr
			raintotal: { start: 4, len: 4, math: [{ div: 10 }] }  // 0.1 mm
		}
	},
	'R3': {
		len: 9,
		data: {
			rainrate: { start: 0, len: 3 },   // mm/hr
			flipcount: { start: 3, len: 1 },
			raintotal: { start: 4, len: 4 },  // mm
			unknown: { start: 8, len: 1 }
		}
	},
	'THB1': {
		len: 9,
		data: {
			temperature: { start: 0, len: 3, math: [{ div: 10 }] },
			sign: { start: 3, len: 1 },
			humidity: { start: 4, len: 2 },
			comfort: { start: 6, len: 1, enc: 'bin', map:
				{ 0: 'Normal', 4: 'Comfortable', 8: 'Dry', 0xc: 'Wet' }
			},
			pressure: { start: 7, len: 2, enc: 'bin', math: [{ add: 795 }] } // mbar
		}
	},
	'THB2': {
		len: 11,
		data: {
			temperature: { start: 0, len: 3, math: [{ div: 10 }] },
			sign: { start: 3, len: 1 },
			humidity: { start: 4, len: 2 },
			comfort: { start: 6, len: 1, enc: 'bin', map:
				{ 0: 'Normal', 4: 'Comfortable', 8: 'Dry', 0xc: 'Wet' }
			},
			pressure: { start: 7, len: 2, enc: 'bin', math: [{ add: 856 }] }, // mbar
			unknown: { start: 9, len: 1 },
			forecast: { start: 10, len: 1, enc: 'bin', map:
				{ 2: 'Cloudy', 3: 'Rainy', 6: 'Partly cloudy', 0xc: 'Sunny' }
			}
		}
	},
	'THB3': {
		len: 11,
		data: {
			temperature: { start: 0, len: 3, math: [{ div: 10 }] },
			sign: { start: 3, len: 1 },
			humidity: { start: 4, len: 2 },
			comfort: { start: 6, len: 1, enc: 'bin', map:
				{ 0: 'Normal', 4: 'Comfortable', 8: 'Dry', 0xc: 'Wet' }
			},
			pressure: { start: 7, len: 2, enc: 'bin',
				math: [{ div: 0.5 }, { add: 595 }, { plus: { start: 9, len: 1, enc: 'bin', math: [{ mask: 1 }] } }] },
			forecast: { start: 10, len: 1, enc: 'bin', map:
				{ 0: 'Cloudy', 1: 'Partly cloudy', 2: 'Rainy', 3: 'Sunny' }
			},
			unknown: { start: 6, len: 5 }
		}
	}
}

const knownSensors = {
	'0fcc': { name: 'RTGR328N', layout: 'TH1' },
	'1984': { name: 'WGR800', layout: 'W1' },
	'1994': { name: 'WGR800', layout: 'W1' },
	'1d20': { name: 'THGN123N/THGR122NX', layout:'TH1' },
	'1a2d': { name: 'THGR228N', layout:'TH1' },
	'1d30': { name: 'THGN500' },
	'1a3d': { name: 'THGR918', layout: 'TH1' },
	'2914': { name: 'PCR800', layout: 'R1' },
	'2a1d': { name: 'RGR126/RGR682/RGR918', layout: 'R3' },
	'2d10': { name: 'RGR968', layout: 'R2' },
	'3a0d': { name: 'STR918/WGR918' },
	'3d00': { name: 'WGR918N', layout: 'W1' }, // to be verified
	'5d53': { name: 'BTHGN129', layout: 'THB3' },
	'5a5d': { name: 'BTHR918', layout: 'THB1' },
	'5d60': { name: 'BTHR918N/BTHR968', layout: 'THB2' },
	'c844': { name: 'THWR800', layout: 'T1' },
	'ca2c': { name: 'THGR328', layout: 'TH1' },
	'd874': { name: 'UVN800', layout: 'UV2' },
	'ec40': { name: 'THN132N/THR238NF', layout: 'T1' },
	'ea4c': { name: 'THWR288A' },
	'ec70': { name: 'UVR128', layout: 'UV1' },
	'f824': { name: 'THGN800/THGN801/THGR810', layout:'TH1' },
	'f8b4': { name: 'THGR810', layout: 'TH1' },
	'fa28': { name: 'THGR810', layout: 'TH1' },
	'fab8': { name: 'WTGR800', layout: 'TH1' }
}

var v2, v22, v3;
var version;

// calcChecksum
function calcChecksum(data, end) {
	let checksum = 0;
	for (let i = 0; i < end / 4; i++) {
		checksum += Number(utils.bin2dec(data.slice(i * 4, i * 4 + 4)));
	}
	return checksum;
}

// decodeOregonData
function decodeOregonData(data) {
	let id = ('0000' + utils.bin2hex(data.slice(0, 16))).slice(-4);
  version.debug('Device id hex', id);
	let values = id;

	let layout = (knownSensors[id] != null ? knownSensors[id].layout : null);
	if (dataLayouts[layout] != null) {
		// Check the checksum before we start decoding
		let pos = 32 + 4 * dataLayouts[layout].len;

		let check = Number(utils.bin2dec(data.slice(pos + 4, pos + 8) + data.slice(pos, pos + 4)));
		let crc = calcChecksum(data, pos);

		// Decode the values if the payload is valid
		//version.debug('CRC', crc, 'Calculated', check);
		if (crc === check) {
			version.debug('Sensor type:', knownSensors[id].name);

			// Nibble 5 is the channel
			let channel = Number(utils.bin2dec(data.slice(16, 20)));
			version.debug('Channel number:', channel);

			// Nibble 6 & 7 contain the rolling code
			let rollingCode = utils.bin2hex(data.slice(20, 28));
			version.debug('Rolling code:', rollingCode);

			// Nibble 8 contains the flags
			// bit 2 (0x4) is the low battery indicator
			let flagnibble = data.slice(28, 32);
			version.debug('Flag nibble:', flagnibble);

			let lowbattery = flagnibble[1] === '1';
			version.debug('Low battery:', lowbattery);

			// Store the results so far
			values = {
				name: knownSensors[id].name,
				layout: knownSensors[id].layout,
				id: id,
				channel: channel,
				rolling: rollingCode,
				data: {}
			};

			var decode = (p, elem) => {
				let value = 0;
				for (let i = elem.len - 1; i >= 0; i--) {
					let nibble = data.slice(4 * (elem.start + i), 4 * (elem.start + 1 + i));
					//version.debug(utils.bin2hex(nibble));
					if (elem.enc == null) {
						value += utils.bin2hex(nibble);
					} else if (elem.enc === 'bin') {
						value += (i === 0 ? 1 : 16 * i) * utils.bin2dec(nibble);
					}
				}
				if (p == 'direction') {
					value *= 22.5;
				} else if (elem.map != null) {
					value = elem.map[value] || 'Unknown';
				} else if (p != 'unknown') {
					value = Number(value);
					if (elem.math) {
						for (let m = 0; m < elem.math.length; m++) {
							let action = elem.math[m]
							if (action.min !== undefined) {
								value -= action.min;
							}
							if (action.div !== undefined) {
								value /= action.div;
							}
		  				if (action.add !== undefined) {
								value += action.add;
							}
							if (action.mask !== undefined) {
								value &= action.mask;
							}
							if (action.plus !== undefined) {
								value += decode('plus', action.plus);
							}
						}
					}
				}
				return value;
			}
			// Decode data part of the message
			data = data.slice(32);
			for (let p in dataLayouts[layout].data) {
				let elem = dataLayouts[layout].data[p];
				let value = decode(p, elem);
				values.data[p] = value;
				version.debug('Data > ' + p + ':', value);
			}
			if (values.data.sign != null) {
				if (Number(values.data.sign) > 0) {
					values.data.temperature *= -1;
				}
				delete(values.data.sign);
			}
			values.data.lowbattery = lowbattery;
			//values.data.battery = (100 - 10 * utils.bin2dec(flagnibble)) + '%';
			//version.debug('Battery:', values.data.battery);
		} else {
			values = 'Checksum mismatch (' + crc + ' vs ' + check + ')';
		}
	} else {
		if (knownSensors[id] !== undefined) {
			values = 'Sensor ID ' + id + ' is known, but layout is not. Ignoring...';
		} else {
			values = 'Unknown sensor ID ' + id + '; ignoring...';
		}
	}
	return values;
}

function parseOregonData(payLoad, ver) {
	version = (ver === 2 ? v2 : (ver === 2.2 ? v22 : v3)); // hack for version.debug per version

	// Convert to regular arry such that we can use splice, reverse etc.
	let data = Array.prototype.slice.call(payLoad, 0);

	let bits = data.join('');
	let firstZero = bits.indexOf('0');
	let firstMarker = bits.indexOf('0101');
	
	if(firstMarker !== -1 && firstZero == firstMarker)
		data = data.slice(firstMarker+4);

	// Remove incomplete nibble if present
	let extra = data.length % 4;
	if (extra !== 0) {
		version.debug('Removing incomplete nibble from message');
		data = data.slice(0, -extra);
		version.debug('data array length', data.length);
	}

  // Flip the nibbles and make a string
  let datastring = '';
	for (let i = 0; i < data.length; i += 4) {
		datastring += (data.slice(i, i + 4)).reverse().join('');
	}

	// Decode the data part
	let result = decodeOregonData(datastring);

	return result;
};

module.exports = {
	init: () => {
		v2 = new utils.WeatherSignal({
			id: 'oregonv2',
			name: 'Oregon Scientific v2.1',
			hint: {
				en: 'Supports Oregon Scientific sensors like TH(G)N132N, THGR228N, BTHR918N etc.',
				nl: 'Ondersteunt Oregon Scientific sensoren zoals TH(G)N132N, THGR228N, BTHR918N etc.'
			},
			signal: 'OregonV2',
			parser: (x) => parseOregonData(x, 2)
		});
		v22 = new utils.WeatherSignal({
			id: 'oregonv22',
			name: 'Oregon Scientific v2.2',
			hint: {
				en: 'Supports Oregon Scientific sensors like BTHGN129',
				nl: 'Ondersteunt Oregon Scientific sensoren zoals BTHGN129'
			},
			signal: 'OregonV2_2',
			parser: (x) => parseOregonData(x, 2.2)
		});
		v3 = new utils.WeatherSignal({
			id: 'oregonv3',
			name: 'Oregon Scientific v3',
			hint: {
				en: 'Supports Oregon Scientific sensors with the 3.0 logo (e.g. WGR800, PCR800, THGN80x, THGR810 etc.)',
				nl: 'Ondersteunt Oregon Scientific sensoren met het 3.0 logo (e.g. WGR800, PCR800, THGN80x, THGR810 etc.)'
			},
			signal: 'OregonV3',
			parser: (x) => parseOregonData(x, 3)
		});
	}
}
